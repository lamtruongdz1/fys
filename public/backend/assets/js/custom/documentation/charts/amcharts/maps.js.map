{"version":3,"file":"js/custom/documentation/charts/amcharts/maps.js","mappings":";;;;;;AAAa;;AAEb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,4CAA4C,KAAK;AACjD;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,2DAA2D,MAAM;AACjE;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA,aAAa;;;AAGb;AACA,kDAAkD,uEAAuE,IAAI,qCAAqC;AAClK;AACA;AACA,iBAAiB;AACjB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;;AAEb,SAAS,GAAG;AACZ;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kCAAkC,0CAA0C;AAC5E,oCAAoC,4CAA4C;AAChF,+BAA+B,wCAAwC;AACvE,mCAAmC,kCAAkC;;AAErE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,6BAA6B;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,+BAA+B;AAC5E;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iBAAiB,EAAE;;AAEnB;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,SAAS,GAAG;AACZ;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;;AAEb;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;;AAEA,iBAAiB;AACjB,aAAa;;;AAGbaAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,GAAG;;;AAG5C;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA,aAAa;;;AAGb;AACA;AACA,2BAA2B,GAAG;AAC9B;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;;AAGb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA,aAAa;;AAEb,SAAS,GAAG;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,CAAC","sources":["webpack://metronic/../demo9/src/js/custom/documentation/charts/amcharts/maps.js"],"sourcesContent":["\"use strict\";\n\n// Class definition\nvar KTGeneralAmChartsMaps = function () {\n    // Shared variables\n    var chart;\n\n    // Private functions\n    var _demo1 = function () {\n        // Init AmChart -- for more info, please visit the official documentiation: https://www.amcharts.com/docs/v4/\n        am4core.ready(function () {\n\n            // Themes begin\n            am4core.useTheme(am4themes_animated);\n            // Themes end\n\n            // Create map instance\n            chart = am4core.create(\"kt_amcharts_1\", am4maps.MapChart);\n\n            // Set map definition\n            chart.geodata = am4geodata_worldLow;\n\n            // Set projection\n            chart.projection = new am4maps.projections.Miller();\n\n            // Create map polygon series\n            var polygonSeries = chart.series.push(new am4maps.MapPolygonSeries());\n\n            // Exclude Antartica\n            polygonSeries.exclude = [\"AQ\"];\n\n            // Make map load polygon (like country names) data from GeoJSON\n            polygonSeries.useGeodata = true;\n\n            // Configure series\n            var polygonTemplate = polygonSeries.mapPolygons.template;\n            polygonTemplate.tooltipText = \"{name}\";\n            polygonTemplate.polygon.fillOpacity = 0.6;\n\n\n            // Create hover state and set alternative fill color\n            var hs = polygonTemplate.states.create(\"hover\");\n            hs.properties.fill = chart.colors.getIndex(0);\n\n            // Add image series\n            var imageSeries = chart.series.push(new am4maps.MapImageSeries());\n            imageSeries.mapImages.template.propertyFields.longitude = \"longitude\";\n            imageSeries.mapImages.template.propertyFields.latitude = \"latitude\";\n            imageSeries.mapImages.template.tooltipText = \"{title}\";\n            imageSeries.mapImages.template.propertyFields.url = \"url\";\n\n            var circle = imageSeries.mapImages.template.createChild(am4core.Circle);\n            circle.radius = 3;\n            circle.propertyFields.fill = \"color\";\n            circle.nonScaling = true;\n\n            var circle2 = imageSeries.mapImages.template.createChild(am4core.Circle);\n            circle2.radius = 3;\n            circle2.propertyFields.fill = \"color\";\n\n\n            circle2.events.on(\"inited\", function (event) {\n                animateBullet(event.target);\n            })\n\n\n            function animateBullet(circle) {\n                var animation = circle.animate([{ property: \"scale\", from: 1 / chart.zoomLevel, to: 5 / chart.zoomLevel }, { property: \"opacity\", from: 1, to: 0 }], 1000, am4core.ease.circleOut);\n                animation.events.on(\"animationended\", function (event) {\n                    animateBullet(event.target.object);\n                })\n            }\n\n            var colorSet = new am4core.ColorSet();\n\n            imageSeries.data = [{\n                \"title\": \"Brussels\",\n                \"latitude\": 50.8371,\n                \"longitude\": 4.3676,\n                \"color\": colorSet.next()\n            }, {\n                \"title\": \"Copenhagen\",\n                \"latitude\": 55.6763,\n                \"longitude\": 12.5681,\n                \"color\": colorSet.next()\n            }, {\n                \"title\": \"Paris\",\n                \"latitude\": 48.8567,\n                \"longitude\": 2.3510,\n                \"color\": colorSet.next()\n            }, {\n                \"title\": \"Reykjavik\",\n                \"latitude\": 64.1353,\n                \"longitude\": -21.8952,\n                \"color\": colorSet.next()\n            }, {\n                \"title\": \"Moscow\",\n                \"latitude\": 55.7558,\n                \"longitude\": 37.6176,\n                \"color\": colorSet.next()\n            }, {\n                \"title\": \"Madrid\",\n                \"latitude\": 40.4167,\n                \"longitude\": -3.7033,\n                \"color\": colorSet.next()\n            }, {\n                \"title\": \"London\",\n                \"latitude\": 51.5002,\n                \"longitude\": -0.1262,\n                \"url\": \"http://www.google.co.uk\",\n                \"color\": colorSet.next()\n            }, {\n                \"title\": \"Peking\",\n                \"latitude\": 39.9056,\n                \"longitude\": 116.3958,\n                \"color\": colorSet.next()\n            }, {\n                \"title\": \"New Delhi\",\n                \"latitude\": 28.6353,\n                \"longitude\": 77.2250,\n                \"color\": colorSet.next()\n            }, {\n                \"title\": \"Tokyo\",\n                \"latitude\": 35.6785,\n                \"longitude\": 139.6823,\n                \"url\": \"http://www.google.co.jp\",\n                \"color\": colorSet.next()\n            }, {\n                \"title\": \"Ankara\",\n                \"latitude\": 39.9439,\n                \"longitude\": 32.8560,\n                \"color\": colorSet.next()\n            }, {\n                \"title\": \"Buenos Aires\",\n                \"latitude\": -34.6118,\n                \"longitude\": -58.4173,\n                \"color\": colorSet.next()\n            }, {\n                \"title\": \"Brasilia\",\n                \"latitude\": -15.7801,\n                \"longitude\": -47.9292,\n                \"color\": colorSet.next()\n            }, {\n                \"title\": \"Ottawa\",\n                \"latitude\": 45.4235,\n                \"longitude\": -75.6979,\n                \"color\": colorSet.next()\n            }, {\n                \"title\": \"Washington\",\n                \"latitude\": 38.8921,\n                \"longitude\": -77.0241,\n                \"color\": colorSet.next()\n            }, {\n                \"title\": \"Kinshasa\",\n                \"latitude\": -4.3369,\n                \"longitude\": 15.3271,\n                \"color\": colorSet.next()\n            }, {\n                \"title\": \"Cairo\",\n                \"latitude\": 30.0571,\n                \"longitude\": 31.2272,\n                \"color\": colorSet.next()\n            }, {\n                \"title\": \"Pretoria\",\n                \"latitude\": -25.7463,\n                \"longitude\": 28.1876,\n                \"color\": colorSet.next()\n            }];\n\n        }); // end am4core.ready()\n    }\n\n    var _demo2 = function () {\n        // Init AmChart -- for more info, please visit the official documentiation: https://www.amcharts.com/docs/v4/\n        am4core.ready(function () {\n\n            // Themes begin\n            am4core.useTheme(am4themes_animated);\n            // Themes end\n\n            // Create map instance\n            chart = am4core.create(\"kt_amcharts_2\", am4maps.MapChart);\n            chart.geodata = am4geodata_worldLow;\n            chart.projection = new am4maps.projections.Miller();\n            chart.homeZoomLevel = 2.5;\n            chart.homeGeoPoint = {\n                latitude: 38,\n                longitude: -60\n            };\n\n            // Create map polygon series\n            var polygonSeries = chart.series.push(new am4maps.MapPolygonSeries());\n            polygonSeries.useGeodata = true;\n            polygonSeries.mapPolygons.template.fill = chart.colors.getIndex(0).lighten(0.5);\n            polygonSeries.mapPolygons.template.nonScalingStroke = true;\n            polygonSeries.exclude = [\"AQ\"];\n\n            // Add line bullets\n            var cities = chart.series.push(new am4maps.MapImageSeries());\n            cities.mapImages.template.nonScaling = true;\n\n            var city = cities.mapImages.template.createChild(am4core.Circle);\n            city.radius = 6;\n            city.fill = chart.colors.getIndex(0).brighten(-0.2);\n            city.strokeWidth = 2;\n            city.stroke = am4core.color(\"#fff\");\n\n            function addCity(coords, title) {\n                var city = cities.mapImages.create();\n                city.latitude = coords.latitude;\n                city.longitude = coords.longitude;\n                city.tooltipText = title;\n                return city;\n            }\n\n            var paris = addCity({ \"latitude\": 48.8567, \"longitude\": 2.3510 }, \"Paris\");\n            var toronto = addCity({ \"latitude\": 43.8163, \"longitude\": -79.4287 }, \"Toronto\");\n            var la = addCity({ \"latitude\": 34.3, \"longitude\": -118.15 }, \"Los Angeles\");\n            var havana = addCity({ \"latitude\": 23, \"longitude\": -82 }, \"Havana\");\n\n            // Add lines\n            var lineSeries = chart.series.push(new am4maps.MapArcSeries());\n            lineSeries.mapLines.template.line.strokeWidth = 2;\n            lineSeries.mapLines.template.line.strokeOpacity = 0.5;\n            lineSeries.mapLines.template.line.stroke = city.fill;\n            lineSeries.mapLines.template.line.nonScalingStroke = true;\n            lineSeries.mapLines.template.line.strokeDasharray = \"1,1\";\n            lineSeries.zIndex = 10;\n\n            var shadowLineSeries = chart.series.push(new am4maps.MapLineSeries());\n            shadowLineSeries.mapLines.template.line.strokeOpacity = 0;\n            shadowLineSeries.mapLines.template.line.nonScalingStroke = true;\n            shadowLineSeries.mapLines.template.shortestDistance = false;\n            shadowLineSeries.zIndex = 5;\n\n            function addLine(from, to) {\n                var line = lineSeries.mapLines.create();\n                line.imagesToConnect = [from, to];\n                line.line.controlPointDistance = -0.3;\n\n                var shadowLine = shadowLineSeries.mapLines.create();\n                shadowLine.imagesToConnect = [from, to];\n\n                return line;\n            }\n\n            addLine(paris, toronto);\n            addLine(toronto, la);\n            addLine(la, havana);\n\n            // Add plane\n            var plane = lineSeries.mapLines.getIndex(0).lineObjects.create();\n            plane.position = 0;\n            plane.width = 48;\n            plane.height = 48;\n\n            plane.adapter.add(\"scale\", function (scale, target) {\n                return 0.5 * (1 - (Math.abs(0.5 - target.position)));\n            })\n\n            var planeImage = plane.createChild(am4core.Sprite);\n            planeImage.scale = 0.08;\n            planeImage.horizontalCenter = \"middle\";\n            planeImage.verticalCenter = \"middle\";\n            planeImage.path = \"m2,106h28l24,30h72l-44,-133h35l80,132h98c21,0 21,34 0,34l-98,0 -80,134h-35l43,-133h-71l-24,30h-28l15,-47\";\n            planeImage.fill = chart.colors.getIndex(2).brighten(-0.2);\n            planeImage.strokeOpacity = 0;\n\n            var shadowPlane = shadowLineSeries.mapLines.getIndex(0).lineObjects.create();\n            shadowPlane.position = 0;\n            shadowPlane.width = 48;\n            shadowPlane.height = 48;\n\n            var shadowPlaneImage = shadowPlane.createChild(am4core.Sprite);\n            shadowPlaneImage.scale = 0.05;\n            shadowPlaneImage.horizontalCenter = \"middle\";\n            shadowPlaneImage.verticalCenter = \"middle\";\n            shadowPlaneImage.path = \"m2,106h28l24,30h72l-44,-133h35l80,132h98c21,0 21,34 0,34l-98,0 -80,134h-35l43,-133h-71l-24,30h-28l15,-47\";\n            shadowPlaneImage.fill = am4core.color(\"#000\");\n            shadowPlaneImage.strokeOpacity = 0;\n\n            shadowPlane.adapter.add(\"scale\", function (scale, target) {\n                target.opacity = (0.6 - (Math.abs(0.5 - target.position)));\n                return 0.5 - 0.3 * (1 - (Math.abs(0.5 - target.position)));\n            })\n\n            // Plane animation\n            var currentLine = 0;\n            var direction = 1;\n            function flyPlane() {\n\n                // Get current line to attach plane to\n                plane.mapLine = lineSeries.mapLines.getIndex(currentLine);\n                plane.parent = lineSeries;\n                shadowPlane.mapLine = shadowLineSeries.mapLines.getIndex(currentLine);\n                shadowPlane.parent = shadowLineSeries;\n                shadowPlaneImage.rotation = planeImage.rotation;\n\n                // Set up animation\n                var from, to;\n                var numLines = lineSeries.mapLines.length;\n                if (direction == 1) {\n                    from = 0\n                    to = 1;\n                    if (planeImage.rotation != 0) {\n                        planeImage.animate({ to: 0, property: \"rotation\" }, 1000).events.on(\"animationended\", flyPlane);\n                        return;\n                    }\n                }\n                else {\n                    from = 1;\n                    to = 0;\n                    if (planeImage.rotation != 180) {\n                        planeImage.animate({ to: 180, property: \"rotation\" }, 1000).events.on(\"animationended\", flyPlane);\n                        return;\n                    }\n                }\n\n                // Start the animation\n                var animation = plane.animate({\n                    from: from,\n                    to: to,\n                    property: \"position\"\n                }, 5000, am4core.ease.sinInOut);\n                animation.events.on(\"animationended\", flyPlane)\n                /*animation.events.on(\"animationprogress\", function(ev) {\n                  var progress = Math.abs(ev.progress - 0.5);\n                  //console.log(progress);\n                  //planeImage.scale += 0.2;\n                });*/\n\n                shadowPlane.animate({\n                    from: from,\n                    to: to,\n                    property: \"position\"\n                }, 5000, am4core.ease.sinInOut);\n\n                // Increment line, or reverse the direction\n                currentLine += direction;\n                if (currentLine < 0) {\n                    currentLine = 0;\n                    direction = 1;\n                }\n                else if ((currentLine + 1) > numLines) {\n                    currentLine = numLines - 1;\n                    direction = -1;\n                }\n\n            }\n\n            // Go!\n            flyPlane();\n\n        }); // end am4core.ready()\n    }\n\n    var _demo3 = function () {\n        // Init AmChart -- for more info, please visit the official documentiation: https://www.amcharts.com/docs/v4/\n        am4core.ready(function () {\n\n            // Themes begin\n            am4core.useTheme(am4themes_animated);\n            // Themes end\n\n            // Create map instance\n            chart = am4core.create(\"kt_amcharts_3\", am4maps.MapChart);\n            var interfaceColors = new am4core.InterfaceColorSet();\n\n            try {\n                chart.geodata = am4geodata_worldLow;\n            }\n            catch (e) {\n                chart.raiseCriticalError(new Error(\"Map geodata could not be loaded. Please download the latest <a href=\\\"https://www.amcharts.com/download/download-v4/\\\">amcharts geodata</a> and extract its contents into the same directory as your amCharts files.\"));\n            }\n\n\n            var label = chart.createChild(am4core.Label)\n            label.text = \"12 months (3/7/2019 data) rolling measles\\nincidence per 1'000'000 total population. \\n Bullet size uses logarithmic scale.\";\n            label.fontSize = 12;\n            label.align = \"left\";\n            label.valign = \"bottom\"\n            label.fill = am4core.color(\"#927459\");\n            label.background = new am4core.RoundedRectangle()\n            label.background.cornerRadius(10, 10, 10, 10);\n            label.padding(10, 10, 10, 10);\n            label.marginLeft = 30;\n            label.marginBottom = 30;\n            label.background.strokeOpacity = 0.3;\n            label.background.stroke = am4core.color(\"#927459\");\n            label.background.fill = am4core.color(\"#f9e3ce\");\n            label.background.fillOpacity = 0.6;\n\n            var dataSource = chart.createChild(am4core.TextLink)\n            dataSource.text = \"Data source: WHO\";\n            dataSource.fontSize = 12;\n            dataSource.align = \"left\";\n            dataSource.valign = \"top\"\n            dataSource.url = \"https://www.who.int/immunization/monitoring_surveillance/burden/vpd/surveillance_type/active/measles_monthlydata/en/\"\n            dataSource.urlTarget = \"_blank\";\n            dataSource.fill = am4core.color(\"#927459\");\n            dataSource.padding(10, 10, 10, 10);\n            dataSource.marginLeft = 30;\n            dataSource.marginTop = 30;\n\n            // Set projection\n            chart.projection = new am4maps.projections.Orthographic();\n            chart.panBehavior = \"rotateLongLat\";\n            chart.padding(20, 20, 20, 20);\n\n            // Add zoom control\n            chart.zoomControl = new am4maps.ZoomControl();\n\n            var homeButton = new am4core.Button();\n            homeButton.events.on(\"hit\", function () {\n                chart.goHome();\n            });\n\n            homeButton.icon = new am4core.Sprite();\n            homeButton.padding(7, 5, 7, 5);\n            homeButton.width = 30;\n            homeButton.icon.path = \"M16,8 L14,8 L14,16 L10,16 L10,10 L6,10 L6,16 L2,16 L2,8 L0,8 L8,0 L16,8 Z M16,8\";\n            homeButton.marginBottom = 10;\n            homeButton.parent = chart.zoomControl;\n            homeButton.insertBefore(chart.zoomControl.plusButton);\n\n            chart.backgroundSeries.mapPolygons.template.polygon.fill = am4core.color(\"#bfa58d\");\n            chart.backgroundSeries.mapPolygons.template.polygon.fillOpacity = 1;\n            chart.deltaLongitude = 20;\n            chart.deltaLatitude = -20;\n\n            // limits vertical rotation\n            chart.adapter.add(\"deltaLatitude\", function (delatLatitude) {\n                return am4core.math.fitToRange(delatLatitude, -90, 90);\n            })\n\n            // Create map polygon series\n\n            var shadowPolygonSeries = chart.series.push(new am4maps.MapPolygonSeries());\n            shadowPolygonSeries.geodata = am4geodata_continentsLow;\n\n            try {\n                shadowPolygonSeries.geodata = am4geodata_continentsLow;\n            }\n            catch (e) {\n                shadowPolygonSeries.raiseCriticalError(new Error(\"Map geodata could not be loaded. Please download the latest <a href=\\\"https://www.amcharts.com/download/download-v4/\\\">amcharts geodata</a> and extract its contents into the same directory as your amCharts files.\"));\n            }\n\n            shadowPolygonSeries.useGeodata = true;\n            shadowPolygonSeries.dx = 2;\n            shadowPolygonSeries.dy = 2;\n            shadowPolygonSeries.mapPolygons.template.fill = am4core.color(\"#000\");\n            shadowPolygonSeries.mapPolygons.template.fillOpacity = 0.2;\n            shadowPolygonSeries.mapPolygons.template.strokeOpacity = 0;\n            shadowPolygonSeries.fillOpacity = 0.1;\n            shadowPolygonSeries.fill = am4core.color(\"#000\");\n\n\n            // Create map polygon series\n            var polygonSeries = chart.series.push(new am4maps.MapPolygonSeries());\n            polygonSeries.useGeodata = true;\n\n            polygonSeries.calculateVisualCenter = true;\n            polygonSeries.tooltip.background.fillOpacity = 0.2;\n            polygonSeries.tooltip.background.cornerRadius = 20;\n\n            var template = polygonSeries.mapPolygons.template;\n            template.nonScalingStroke = true;\n            template.fill = am4core.color(\"#f9e3ce\");\n            template.stroke = am4core.color(\"#e2c9b0\");\n\n            polygonSeries.calculateVisualCenter = true;\n            template.propertyFields.id = \"id\";\n            template.tooltipPosition = \"fixed\";\n            template.fillOpacity = 1;\n\n            template.events.on(\"over\", function (event) {\n                if (event.target.dummyData) {\n                    event.target.dummyData.isHover = true;\n                }\n            })\n            template.events.on(\"out\", function (event) {\n                if (event.target.dummyData) {\n                    event.target.dummyData.isHover = false;\n                }\n            })\n\n            var hs = polygonSeries.mapPolygons.template.states.create(\"hover\");\n            hs.properties.fillOpacity = 1;\n            hs.properties.fill = am4core.color(\"#deb7ad\");\n\n\n            var graticuleSeries = chart.series.push(new am4maps.GraticuleSeries());\n            graticuleSeries.mapLines.template.stroke = am4core.color(\"#fff\");\n            graticuleSeries.fitExtent = false;\n            graticuleSeries.mapLines.template.strokeOpacity = 0.2;\n            graticuleSeries.mapLines.template.stroke = am4core.color(\"#fff\");\n\n\n            var measelsSeries = chart.series.push(new am4maps.MapPolygonSeries())\n            measelsSeries.tooltip.background.fillOpacity = 0;\n            measelsSeries.tooltip.background.cornerRadius = 20;\n            measelsSeries.tooltip.autoTextColor = false;\n            measelsSeries.tooltip.label.fill = am4core.color(\"#000\");\n            measelsSeries.tooltip.dy = -5;\n\n            var measelTemplate = measelsSeries.mapPolygons.template;\n            measelTemplate.fill = am4core.color(\"#bf7569\");\n            measelTemplate.strokeOpacity = 0;\n            measelTemplate.fillOpacity = 0.75;\n            measelTemplate.tooltipPosition = \"fixed\";\n\n\n\n            var hs2 = measelsSeries.mapPolygons.template.states.create(\"hover\");\n            hs2.properties.fillOpacity = 1;\n            hs2.properties.fill = am4core.color(\"#86240c\");\n\n            polygonSeries.events.on(\"inited\", function () {\n                polygonSeries.mapPolygons.each(function (mapPolygon) {\n                    var count = data[mapPolygon.id];\n\n                    if (count > 0) {\n                        var polygon = measelsSeries.mapPolygons.create();\n                        polygon.multiPolygon = am4maps.getCircle(mapPolygon.visualLongitude, mapPolygon.visualLatitude, Math.max(0.2, Math.log(count) * Math.LN10 / 10));\n                        polygon.tooltipText = mapPolygon.dataItem.dataContext.name + \": \" + count;\n                        mapPolygon.dummyData = polygon;\n                        polygon.events.on(\"over\", function () {\n                            mapPolygon.isHover = true;\n                        })\n                        polygon.events.on(\"out\", function () {\n                            mapPolygon.isHover = false;\n                        })\n                    }\n                    else {\n                        mapPolygon.tooltipText = mapPolygon.dataItem.dataContext.name + \": no data\";\n                        mapPolygon.fillOpacity = 0.9;\n                    }\n\n                })\n            })\n\n\n            var data = {\n                \"AL\": 504.38,\n                \"AM\": 6.5,\n                \"AO\": 2.98,\n                \"AR\": 0.32,\n                \"AT\": 10.9,\n                \"AU\": 5.02,\n                \"AZ\": 17.38,\n                \"BA\": 24.45,\n                \"BD\": 13.4,\n                \"BE\": 12.06,\n                \"BF\": 93.37,\n                \"BG\": 1.68,\n                \"BI\": 0.95,\n                \"BJ\": 93.36,\n                \"BR\": 49.42,\n                \"BT\": 10.03,\n                \"BY\": 26.16,\n                \"CA\": 0.96,\n                \"CD\": 69.71,\n                \"CF\": 4.57,\n                \"CG\": 19.7,\n                \"CH\": 6.19,\n                \"CI\": 14.1,\n                \"CL\": 1.4,\n                \"CM\": 41.26,\n                \"CN\": 2.6,\n                \"CO\": 4.48,\n                \"CY\": 7.69,\n                \"CZ\": 23.09,\n                \"DK\": 1.58,\n                \"EE\": 9.91,\n                \"EG\": 0.63,\n                \"ES\": 4.96,\n                \"FI\": 3.27,\n                \"FR\": 43.26,\n                \"GA\": 3.03,\n                \"GB\": 14.3,\n                \"GE\": 809.09,\n                \"GH\": 39.78,\n                \"GM\": 2.45,\n                \"GN\": 45.98,\n                \"GQ\": 23.74,\n                \"GR\": 154.42,\n                \"HR\": 5.46,\n                \"HU\": 1.44,\n                \"ID\": 16.87,\n                \"IE\": 17.56,\n                \"IL\": 412.24,\n                \"IN\": 47.85,\n                \"IQ\": 12.96,\n                \"IR\": 1.13,\n                \"IT\": 44.29,\n                \"JP\": 3.27,\n                \"KE\": 16.8,\n                \"KG\": 253.37,\n                \"KH\": 0.44,\n                \"KM\": 1.26,\n                \"KZ\": 116.3,\n                \"LA\": 1.33,\n                \"LK\": 0.53,\n                \"LR\": 692.27,\n                \"LS\": 5.9,\n                \"LT\": 14.44,\n                \"LU\": 6.95,\n                \"LV\": 6.09,\n                \"MA\": 0.2,\n                \"MD\": 83.75,\n                \"ME\": 319.75,\n                \"MG\": 2386.35,\n                \"MK\": 28.83,\n                \"ML\": 48.68,\n                \"MM\": 40.31,\n                \"MN\": 0.66,\n                \"MR\": 14.65,\n                \"MT\": 11.65,\n                \"MV\": 9.35,\n                \"MX\": 0.04,\n                \"MY\": 86.41,\n                \"MZ\": 13.49,\n                \"NA\": 12.9,\n                \"NE\": 80.88,\n                \"NG\": 31.44,\n                \"NL\": 1.47,\n                \"NO\": 2.47,\n                \"NP\": 10.8,\n                \"NZ\": 9.23,\n                \"PE\": 1.29,\n                \"PK\": 159.14,\n                \"PL\": 8.24,\n                \"PT\": 16.68,\n                \"RO\": 63.05,\n                \"RS\": 473.46,\n                \"RU\": 14.24,\n                \"RW\": 5.45,\n                \"SE\": 2.64,\n                \"SG\": 8.18,\n                \"SI\": 3.37,\n                \"SK\": 112.78,\n                \"SN\": 3.37,\n                \"SO\": 8.03,\n                \"SS\": 19.3,\n                \"TD\": 75.63,\n                \"TG\": 34.84,\n                \"TH\": 81.02,\n                \"TL\": 9.46,\n                \"TN\": 7.8,\n                \"TR\": 7.08,\n                \"UA\": 1439.02,\n                \"UG\": 62.55,\n                \"US\": 1.32,\n                \"UZ\": 0.99,\n                \"VE\": 179.55,\n                \"ZA\": 3.09,\n                \"ZM\": 9.82,\n                \"ZW\": 0.06\n            }\n\n        }); // end am4core.ready()\n    }\n\n    var _demo4 = function () {\n        // Init AmChart -- for more info, please visit the official documentiation: https://www.amcharts.com/docs/v4/\n        am4core.ready(function () {\n\n            // Themes begin\n            am4core.useTheme(am4themes_frozen);\n            am4core.useTheme(am4themes_animated);\n            // Themes end\n\n            // Create map instance\n            chart = am4core.create(\"kt_amcharts_4\", am4maps.MapChart);\n            // Set map definition\n            chart.geodata = am4geodata_worldTimeZoneAreasHigh;\n            // Set projection\n            chart.projection = new am4maps.projections.Miller();\n            chart.panBehavior = \"move\";\n\n            var startColor = chart.colors.getIndex(0)\n            var middleColor = chart.colors.getIndex(7)\n            var endColor = chart.colors.getIndex(14)\n\n            var interfaceColors = new am4core.InterfaceColorSet();\n\n            // Create map polygon series\n            var polygonSeries = chart.series.push(new am4maps.MapPolygonSeries());\n            // Make map load polygon (like country names) data from GeoJSON\n            polygonSeries.useGeodata = true;\n            polygonSeries.calculateVisualCenter = true;\n\n            var polygonTemplate = polygonSeries.mapPolygons.template;\n            polygonTemplate.fillOpacity = 0.6;\n            polygonTemplate.nonScalingStroke = true;\n            polygonTemplate.strokeWidth = 1;\n            polygonTemplate.stroke = interfaceColors.getFor(\"background\");\n            polygonTemplate.strokeOpacity = 1;\n\n            polygonTemplate.adapter.add(\"fill\", function (fill, target) {\n\n                if (target.dataItem.index > 0) {\n                    return chart.colors.getIndex(target.dataItem.index);\n                }\n                return fill;\n            })\n            /// add country borders\n            // Create map polygon series\n            \n            var countrySeries = chart.series.push(new am4maps.MapPolygonSeries());\n            // Make map load polygon (like country names) data from GeoJSON\n            countrySeries.useGeodata = true;\n            countrySeries.geodata = am4geodata_worldLow;\n            \n            var countryPolygonTemplate = countrySeries.mapPolygons.template;\n            countryPolygonTemplate.fillOpacity = 0;\n            countryPolygonTemplate.nonScalingStroke = true;\n            countryPolygonTemplate.strokeWidth = 1;\n            countryPolygonTemplate.stroke = interfaceColors.getFor(\"background\");\n            countryPolygonTemplate.strokeOpacity = 0.3;\n            \n\n            // Create map polygon series\n            var boundsSeries = chart.series.push(new am4maps.MapPolygonSeries());\n            boundsSeries.geodata = am4geodata_worldTimeZonesHigh;\n            boundsSeries.useGeodata = true;\n            boundsSeries.mapPolygons.template.fill = am4core.color(interfaceColors.getFor(\"alternativeBackground\"));\n            boundsSeries.mapPolygons.template.fillOpacity = 0.07;\n            boundsSeries.mapPolygons.template.nonScalingStroke = true;\n            boundsSeries.mapPolygons.template.strokeWidth = 0.5;\n            boundsSeries.mapPolygons.template.strokeOpacity = 1;\n            boundsSeries.mapPolygons.template.stroke = interfaceColors.getFor(\"background\");\n            boundsSeries.tooltipText = \"{id}\";\n\n\n            var hs = polygonTemplate.states.create(\"hover\");\n            hs.properties.fillOpacity = 1;\n\n            var bhs = boundsSeries.mapPolygons.template.states.create(\"hover\");\n            bhs.properties.fillOpacity = 0.3;\n\n\n            polygonSeries.mapPolygons.template.events.on(\"over\", function (event) {\n                var polygon = boundsSeries.getPolygonById(event.target.dataItem.dataContext.id);\n                if (polygon) {\n                    polygon.isHover = true;\n                }\n            })\n\n            polygonSeries.mapPolygons.template.events.on(\"out\", function (event) {\n                var polygon = boundsSeries.getPolygonById(event.target.dataItem.dataContext.id);\n                if (polygon) {\n                    polygon.isHover = false;\n                }\n            })\n\n\n            var labelSeries = chart.series.push(new am4maps.MapImageSeries());\n            var label = labelSeries.mapImages.template.createChild(am4core.Label);\n            label.text = \"{id}\";\n            label.strokeOpacity = 0;\n            label.fill = am4core.color(\"#000000\");\n            label.horizontalCenter = \"middle\";\n            label.fontSize = 9;\n            label.nonScaling = true;\n\n\n            labelSeries.mapImages.template.adapter.add(\"longitude\", (longitude, target) => {\n                target.zIndex = 100000;\n\n                var polygon = polygonSeries.getPolygonById(target.dataItem.dataContext.id);\n                if (polygon) {\n                    return polygon.visualLongitude\n                }\n                return longitude;\n            })\n\n            labelSeries.mapImages.template.adapter.add(\"latitude\", (latitude, target) => {\n                var polygon = polygonSeries.getPolygonById(target.dataItem.dataContext.id);\n                if (polygon) {\n                    return polygon.visualLatitude\n                }\n                return latitude;\n            })\n\n\n            var button = chart.createChild(am4core.SwitchButton);\n            button.align = \"right\";\n            button.marginTop = 40;\n            button.marginRight = 40;\n            button.valign = \"top\";\n            button.leftLabel.text = \"Map\";\n            button.rightLabel.text = \"Globe\";\n\n            button.events.on(\"toggled\", function () {\n\n                chart.deltaLatitude = 0;\n                chart.deltaLongitude = 0;\n                chart.deltaGamma = 0;\n\n                if (button.isActive) {\n                    chart.projection = new am4maps.projections.Orthographic;\n                    chart.panBehavior = \"rotateLongLat\";\n                }\n                else {\n                    chart.projection = new am4maps.projections.Miller;\n                    chart.panBehavior = \"move\";\n                }\n            })\n\n            polygonSeries.events.on(\"datavalidated\", function () {\n                labelSeries.data = polygonSeries.data;\n            })\n\n        }); // end am4core.ready()\n    }\n\n    return {\n        // Public Functions\n        init: function () {\n            _demo1();\n            _demo2();\n            _demo3();\n            _demo4();\n        }\n    };\n}();\n\n// On document ready\nKTUtil.onDOMContentLoaded(function () {\n    KTGeneralAmChartsMaps.init();\n});\n"],"names":[],"sourceRoot":""}